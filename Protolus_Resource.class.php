<?php
    class Protolus_Resource{
        public static $packages = array();
        public static $handlers = array();
        
        public static function head($callback){
            foreach(Protolus_Resource::$packages as $name, $resource){
                
            }
        }
        
        public static function handle($request, $response, $callback){
            
        }
        
        public static function require($component){
            Protolus_Resource::$packages[$component] = new Protolus_Resource($component);
        }
        
        protected $dependencies = array();
        
        public function __construct($name, $options){
            $this->name = $name;
            if(!$options) $options = array();
        }
        
        public function dependencies(){
            $result = array();
            return $result;
        }
        
        public function output($includeDependencies){
            
        }
        
        public function package($includeDependencies){
            $this->path = './node_modules/'.$this->name.'/';
            try{
                $manifest = file_get_contents($this->path.'package.json');
                $data = json_decode($manifest);
                $this->contents = $data;
            }catch($ex){
                if(file_exists('./node_modules/'.$this->name.'.js')){
                    $this->contents = array();
                    $this->contents->name = $this->name;
                    $this->contents->autogenerated = true;
                }
            }
            if(!$this->contents->dependencies) $this->contents->dependencies = array();
            if(!$this->contents->optionalDependencies) $this->contents->optionalDependencies = array();
            if(!$this->contents->devDependencies) $this->contents->devDependencies = array();
            if(!$this->contents->resources) $this->contents->resources = array();
            if($includeDependencies){
                foreach($this->contents->dependencies as $name => $version){
                    Protolus_Resource::require($name);
                    $this->dependencies[$name] = $version;
                }
                foreach($this->contents->optionalDependencies as $name => $version){
                    Protolus_Resource::require($name);
                    $this->dependencies[$name] = $version;
                }
            }
        }
        
    }